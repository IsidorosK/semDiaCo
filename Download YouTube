# ######################################################################################################
# #Download video to mp4

# from pytube import YouTube
# import os

# URL = input('Set video URL: ')
# #URL = 'https://www.youtube.com/watch?v=1OeQ3Fevmdg'
# path = input('Set download path: ')

# def downloadYouTube(videourl, folder):

#     yt = YouTube(videourl)
#     yt = yt.streams.filter(progressive=True, file_extension='mp4').order_by('resolution').desc().first()
#     if not os.path.exists(folder):
#         os.makedirs(folder)
#     yt.download(folder)

# downloadYouTube(URL, path)

######################################################################################################
#Download playlist to mp4

from pytube import Playlist
import os

playlist = Playlist(input("Please enter a YouTube playlist link: "))
#playlist = Playlist('https://www.youtube.com/watch?v=OBTiB6b_8e4&list=PLykzf464sU999zK4YzjzW4sk4lDA74t1s')
path = input('Please enter a download path: ')
                     
#print('Number of videos in playlist: %s' % len(playlist.video_urls))
                     
if not os.path.exists(path):
    os.makedirs(path)
                     
playlist.download_all(path)


######################################################################################################
#Rename files

[os.rename(os.path.join(path, f), os.path.join(path, f).replace(' ', '_')) for f in os.listdir(path)]
[os.rename(os.path.join(path, f), os.path.join(path, f).replace('-', '_')) for f in os.listdir(path)]
[os.rename(os.path.join(path, f), os.path.join(path, f).replace('&', '_')) for f in os.listdir(path)]


######################################################################################################
#Convert folder contents from mp4 to wav

VIDEOS_EXTENSION = '.mp4'
AUDIO_EXTENSION = 'wav'

EXTRACT_VIDEO_COMMAND = ('ffmpeg -i "{from_video_path}" '
                         '-f {audio_ext} -ab 192000 '
                         '-vn "{to_audio_path}"')

os.chdir(path)

files = os.listdir(path)
for f in files:
    if not f.endswith(VIDEOS_EXTENSION):
        continue

    f_name = '{}.{}'.format(f[:-4], AUDIO_EXTENSION)
    command = EXTRACT_VIDEO_COMMAND.format(
        from_video_path=f, audio_ext=AUDIO_EXTENSION, to_audio_path=f_name,
    )
    os.system(command)
    
    
######################################################################################################
#Create 1min mp4 segments

def runBash(command):
    os.system(command)

def crop(start,end,input,output):
    str = "ffmpeg -i " + input + " -ss  " + start + " -to " + end + " -c copy " + output
    #print(str)
    runBash(str)    
    
os.chdir(path)

files = os.listdir(path)
for f in files:
    if not f.endswith(VIDEOS_EXTENSION):
        continue
    
    crop("00:00:00","00:01:00", f, f[:-4] +str('_01') +f[-4:])
    crop("00:01:00","00:02:00", f, f[:-4] +str('_02') +f[-4:])
    crop("00:02:00","00:03:00", f, f[:-4] +str('_03') +f[-4:])
    
    #os.remove(f)       #to remove original wav file and save space

######################################################################################################
#Create 1min wav segments
    
os.chdir(path)

files = os.listdir(path)
for f in files:
    if not f.endswith(AUDIO_EXTENSION):
        continue
    
    crop("00:00:00","00:01:00", f, f[:-4] +str('_01') +f[-4:])
    crop("00:01:00","00:02:00", f, f[:-4] +str('_02') +f[-4:])
    crop("00:02:00","00:03:00", f, f[:-4] +str('_03') +f[-4:])

    #os.remove(f)       #to remove original wav file and save space
